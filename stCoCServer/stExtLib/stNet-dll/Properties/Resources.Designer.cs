//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.2034
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace stNet.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("stNet.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на IP range convert end ip address.
        /// </summary>
        public static string aclExceptioConvertIpEnd {
            get {
                return ResourceManager.GetString("aclExceptioConvertIpEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на IP range address.
        /// </summary>
        public static string aclExceptionAddress {
            get {
                return ResourceManager.GetString("aclExceptionAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на IP range list.
        /// </summary>
        public static string aclExceptionList {
            get {
                return ResourceManager.GetString("aclExceptionList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на IP range String Collection.
        /// </summary>
        public static string aclExceptionStringCollection {
            get {
                return ResourceManager.GetString("aclExceptionStringCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на IP range source string error format.
        /// </summary>
        public static string aclExceptioSourceFormat {
            get {
                return ResourceManager.GetString("aclExceptioSourceFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на curl executable not found.
        /// </summary>
        public static string curlProcessError1 {
            get {
                return ResourceManager.GetString("curlProcessError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на failed process start info.
        /// </summary>
        public static string curlProcessError2 {
            get {
                return ResourceManager.GetString("curlProcessError2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на process Faulted or Canceled.
        /// </summary>
        public static string curlProcessError3 {
            get {
                return ResourceManager.GetString("curlProcessError3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на return empty string.
        /// </summary>
        public static string curlProcessError4 {
            get {
                return ResourceManager.GetString("curlProcessError4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на curl exec: {0}.
        /// </summary>
        public static string curlProcessError5 {
            get {
                return ResourceManager.GetString("curlProcessError5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на failed process standard output.
        /// </summary>
        public static string curlProcessError6 {
            get {
                return ResourceManager.GetString("curlProcessError6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на failed to quit in time.
        /// </summary>
        public static string curlProcessError7 {
            get {
                return ResourceManager.GetString("curlProcessError7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на curl process start: {0}.
        /// </summary>
        public static string curlProcessError8 {
            get {
                return ResourceManager.GetString("curlProcessError8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на curl tempoary path not set.
        /// </summary>
        public static string curlProcessError9 {
            get {
                return ResourceManager.GetString("curlProcessError9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Continue.
        /// </summary>
        public static string httpBoxButton {
            get {
                return ResourceManager.GetString("httpBoxButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Http request function is Null.
        /// </summary>
        public static string httpCallbackNull {
            get {
                return ResourceManager.GetString("httpCallbackNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на server response error:.
        /// </summary>
        public static string httpError {
            get {
                return ResourceManager.GetString("httpError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &lt;h3&gt;({0}) URL not support&lt;/h3&gt;&lt;b&gt;Reason:&lt;/b&gt; {1}&lt;hr/&gt;&lt;b&gt;Generated:&lt;/b&gt; {2}&lt;br/&gt;.
        /// </summary>
        public static string httpHTMLBadRequest {
            get {
                return ResourceManager.GetString("httpHTMLBadRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &lt;html&gt;
        ///&lt;head&gt;
        ///	&lt;meta charset=&quot;utf-8&quot; /&gt;
        ///	&lt;meta content=&quot;IE=EmulateIE7&quot; http-equiv=&quot;X-UA-Compatible&quot;/&gt;
        ///	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;
        ///	&lt;meta name=&quot;generator&quot; content=&quot;{0}&quot;/&gt;
        ///	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
        ///	&lt;meta name=&quot;robots&quot; content=&quot;noindex,nofollow&quot;/&gt;
        ///	&lt;title&gt;{1} - {2}&lt;/title&gt;
        ///	&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;/assets/images/favicon.ico&quot; /&gt;
        ///	&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;/assets/images/favicon.ico&quot; /&gt;
        ///	&lt;link [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string httpHtmlError {
            get {
                return ResourceManager.GetString("httpHtmlError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {{&quot;error&quot;:{0},&quot;msg&quot;:&quot;Bad request, reason: {1}&quot;,&quot;data&quot;:[{2}]}}.
        /// </summary>
        public static string httpJsonResponse {
            get {
                return ResourceManager.GetString("httpJsonResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HTTP Resource Locator empty.
        /// </summary>
        public static string httpListenerEmptyResource {
            get {
                return ResourceManager.GetString("httpListenerEmptyResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HTTP Serv add resource URI: {0}.
        /// </summary>
        public static string httpListenerExceptionAddResource {
            get {
                return ResourceManager.GetString("httpListenerExceptionAddResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HTTP Serv loop Exception: .
        /// </summary>
        public static string httpListenerExceptionLoop {
            get {
                return ResourceManager.GetString("httpListenerExceptionLoop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HTTP Serv on Request: .
        /// </summary>
        public static string httpListenerExceptionOnReq {
            get {
                return ResourceManager.GetString("httpListenerExceptionOnReq", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HTTP Serv Start Exception: .
        /// </summary>
        public static string httpListenerExceptionStart {
            get {
                return ResourceManager.GetString("httpListenerExceptionStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HTTP Serv Start Http Exception: .
        /// </summary>
        public static string httpListenerExceptionStartHttp {
            get {
                return ResourceManager.GetString("httpListenerExceptionStartHttp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HTTP Serv Stop Exception: .
        /// </summary>
        public static string httpListenerExceptionStop {
            get {
                return ResourceManager.GetString("httpListenerExceptionStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HTTP Serv Init: .
        /// </summary>
        public static string httpListenerInit {
            get {
                return ResourceManager.GetString("httpListenerInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Http Listener not supported.
        /// </summary>
        public static string httpListenerNoSupport {
            get {
                return ResourceManager.GetString("httpListenerNoSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Http Listener is Null.
        /// </summary>
        public static string httpListenerNull {
            get {
                return ResourceManager.GetString("httpListenerNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Http URI empty.
        /// </summary>
        public static string httpListenerUrlEmpty {
            get {
                return ResourceManager.GetString("httpListenerUrlEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Web client is internal error.
        /// </summary>
        public static string httpLocalError {
            get {
                return ResourceManager.GetString("httpLocalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Minify detect file {0}: {1}, rebuild...
        /// </summary>
        public static string httpMinifyChanged {
            get {
                return ResourceManager.GetString("httpMinifyChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Concat and Minify disabled...
        /// </summary>
        public static string httpMinifyConcatDisabled {
            get {
                return ResourceManager.GetString("httpMinifyConcatDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Minify CSS: {0}.
        /// </summary>
        public static string httpMinifyCSShead {
            get {
                return ResourceManager.GetString("httpMinifyCSShead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Minify JS: {0}.
        /// </summary>
        public static string httpMinifyJShead {
            get {
                return ResourceManager.GetString("httpMinifyJShead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Minify Origin: {0}.
        /// </summary>
        public static string httpMinifyOriginhead {
            get {
                return ResourceManager.GetString("httpMinifyOriginhead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на error binary reader.
        /// </summary>
        public static string httpMinifyStreamBinary {
            get {
                return ResourceManager.GetString("httpMinifyStreamBinary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на error Origin stream read source:.
        /// </summary>
        public static string httpMinifyStreamOrigin {
            get {
                return ResourceManager.GetString("httpMinifyStreamOrigin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на error Out write stream:.
        /// </summary>
        public static string httpMinifyStreamOut {
            get {
                return ResourceManager.GetString("httpMinifyStreamOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на error Out stream writer is null:.
        /// </summary>
        public static string httpMinifyStreamOutNull {
            get {
                return ResourceManager.GetString("httpMinifyStreamOutNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на error Minify read stream:.
        /// </summary>
        public static string httpMinifyStreamRead {
            get {
                return ResourceManager.GetString("httpMinifyStreamRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на error In stream reader is null:.
        /// </summary>
        public static string httpMinifyStreamReadNull {
            get {
                return ResourceManager.GetString("httpMinifyStreamReadNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на st{0} {1}.{2}/EN {3} .NET {4} ({5}).
        /// </summary>
        public static string httpUA {
            get {
                return ResourceManager.GetString("httpUA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Minify {0} error: {1} {2}.
        /// </summary>
        public static string httpUtilMinifyError {
            get {
                return ResourceManager.GetString("httpUtilMinifyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}: File &apos;{1}&apos; does not exist.
        /// </summary>
        public static string httpUtilMinifyFileNotFound {
            get {
                return ResourceManager.GetString("httpUtilMinifyFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;rss xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; version=&quot;2.0&quot;&gt;
        ///  &lt;channel&gt;
        ///    &lt;title&gt;{0} - {1}&lt;/title&gt;
        ///    &lt;description&gt;Oops {0}! {1}, {3}&lt;/description&gt;
        ///    &lt;copyright&gt;(c) {2} &lt;/copyright&gt;
        ///  &lt;/channel&gt;
        ///&lt;/rss&gt;.
        /// </summary>
        public static string httpXmlError {
            get {
                return ResourceManager.GetString("httpXmlError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на IP address is empty, or not valid.
        /// </summary>
        public static string IPListEmpty {
            get {
                return ResourceManager.GetString("IPListEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на converting IP error: &apos;{0}&apos; - {1}.
        /// </summary>
        public static string IPListError {
            get {
                return ResourceManager.GetString("IPListError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на IRC already connected: {0}:{1}.
        /// </summary>
        public static string IRCAlreadyRunException {
            get {
                return ResourceManager.GetString("IRCAlreadyRunException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на QUIT Client Disconnected: {0}.
        /// </summary>
        public static string IRCDisconnectedMessage {
            get {
                return ResourceManager.GetString("IRCDisconnectedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на bad guys &apos;{0}&apos;, don&apos;t KICK channel BOT, understand?.
        /// </summary>
        public static string IRCKickMessage {
            get {
                return ResourceManager.GetString("IRCKickMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template file not found: {0}.
        /// </summary>
        public static string String1 {
            get {
                return ResourceManager.GetString("String1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template append object is empty.
        /// </summary>
        public static string templateAppendObjEmpty {
            get {
                return ResourceManager.GetString("templateAppendObjEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template directory is empty value.
        /// </summary>
        public static string templateDirectoryEmpty {
            get {
                return ResourceManager.GetString("templateDirectoryEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template directory not found: {0}.
        /// </summary>
        public static string templateDirectoryNotFound {
            get {
                return ResourceManager.GetString("templateDirectoryNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template file is busy: {0} ({1}).
        /// </summary>
        public static string templateFileBusy {
            get {
                return ResourceManager.GetString("templateFileBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template file name is empty value.
        /// </summary>
        public static string templateFileNameEmpty {
            get {
                return ResourceManager.GetString("templateFileNameEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template file not found: {0}.
        /// </summary>
        public static string templateFileNotFound {
            get {
                return ResourceManager.GetString("templateFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Template Insert file not found: {0}-{1}-{2}.
        /// </summary>
        public static string templateInsertFileNotFound {
            get {
                return ResourceManager.GetString("templateInsertFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на UPNP error: {0}.
        /// </summary>
        public static string upnpError {
            get {
                return ResourceManager.GetString("upnpError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на UPNP: find {0} devices.
        /// </summary>
        public static string upnpFindServer {
            get {
                return ResourceManager.GetString("upnpFindServer", resourceCulture);
            }
        }
    }
}
